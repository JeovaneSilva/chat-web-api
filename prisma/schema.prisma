generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model conversation {
  id        Int       @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  user1     user      @relation("conversation_user1IdTouser", fields: [user1Id], references: [id], map: "Conversation_user1Id_fkey_uniq")
  user2     user      @relation("conversation_user2IdTouser", fields: [user2Id], references: [id], map: "Conversation_user2Id_fkey_uniq")
  messages  message[]

  @@index([user1Id], map: "Conversation_user1Id_index_uniq")
  @@index([user2Id], map: "Conversation_user2Id_index_uniq")
}

model invite {
  id         Int          @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     InviteStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime?
  receiver   user         @relation("invite_receiverIdTouser", fields: [receiverId], references: [id], map: "Invite_receiverId_fkey_uniq")
  sender     user         @relation("invite_senderIdTouser", fields: [senderId], references: [id], map: "Invite_senderId_fkey_uniq")

  @@index([receiverId], map: "Invite_receiverId_index_uniq")
  @@index([senderId], map: "Invite_senderId_index_uniq")
}

model message {
  id             Int          @id @default(autoincrement())
  content        String
  senderId       Int
  conversationId Int
  createdAt      DateTime     @default(now())
  conversation   conversation @relation(fields: [conversationId], references: [id], map: "Message_conversationId_fkey_uniq")
  user           user         @relation(fields: [senderId], references: [id], map: "Message_senderId_fkey_uniq")

  @@index([conversationId], map: "Message_conversationId_index_uniq")
  @@index([senderId], map: "Message_senderId_index_uniq")
}

model user {
  id                                      Int            @id @default(autoincrement())
  name                                    String         @unique(map: "User_name_key")
  email                                   String         @unique(map: "User_email_key")
  password                                String
  isOnline                                Boolean        @default(false)
  createdAt                               DateTime       @default(now())
  updatedAt                               DateTime?
  profilePicture                          String?
  conversation_conversation_user1IdTouser conversation[] @relation("conversation_user1IdTouser")
  conversation_conversation_user2IdTouser conversation[] @relation("conversation_user2IdTouser")
  invite_invite_receiverIdTouser          invite[]       @relation("invite_receiverIdTouser")
  invite_invite_senderIdTouser            invite[]       @relation("invite_senderIdTouser")
  message                                 message[]
  userstatus                              userstatus?
}

model userstatus {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique(map: "UserStatus_userId_key")
  isOnline  Boolean   @default(false)
  lastSeen  DateTime  @default(now())
  updatedAt DateTime?
  user      user      @relation(fields: [userId], references: [id], map: "UserStatus_userId_fkey_uniq")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}
